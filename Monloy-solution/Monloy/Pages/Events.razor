@page "/Events"

<h3>Events</h3>

@using System.ComponentModel.DataAnnotations

<h3>Buy MotorParts Online</h3>

<div class="container">
    <EditForm Model="motorPart" OnValidSubmit="SaveMotorPart">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="MotorPartName">MotorPart Name:</label>
            <InputText id="MotorPartName" @bind-Value="motorPart.Name" class="form-control" />
            <ValidationMessage For="@(() => motorPart.Name)" />
        </div>

        <div class="form-group">
            <label for="MotorPartColor">MotorPart Color:</label>
            <InputText id="MotorPartColor" @bind-Value="motorPart.Color" class="form-control" />
            <ValidationMessage For="@(() => motorPart.Color)" />
        </div>

        <div class="form-group">
            <label for="MotorPartPrice">Price:</label>
            <InputNumber id="MotorPartPrice" @bind-Value="motorPart.Price" class="form-control" />
            <ValidationMessage For="@(() => motorPart.Price)" />
        </div>

        <div class="form-group">
            <label for="MotorPartQuantity">Quantity:</label>
            <InputNumber id="MotorPartQuantity" @bind-Value="motorPart.Quantity" class="form-control" />
            <ValidationMessage For="@(() => motorPart.Quantity)" />
        </div>

        <button type="submit" class="btn btn-primary">@((motorPart.Id == 0) ? "Add MotorPart" : "Update MotorPart")</button>
    </EditForm>

    <hr />

    <h4>MotorParts List</h4>
    <ul class="list-group">
        @if (motorParts.Count > 0)
        {
            foreach (var part in motorParts)
            {
                <li class="list-group-item d-flex justify-content-between align-items-center">
                    <span>@part.Name (@part.Color) - $@part.Price (Quantity: @part.Quantity)</span>
                    <div>
                        <button @onclick="() => EditMotorPart(part)" class="btn btn-warning btn-sm">Edit</button>
                        <button @onclick="() => DeleteMotorPart(part)" class="btn btn-danger btn-sm">Delete</button>
                    </div>
                </li>
            }
        }
        else
        {
            <li class="list-group-item">No motor parts added yet.</li>
        }
    </ul>
</div>

@code {
    private MotorPart motorPart = new MotorPart();
    private List<MotorPart> motorParts = new List<MotorPart>();

    private void SaveMotorPart()
    {
        if (motorPart.Id == 0) // New part
        {
            motorPart.Id = motorParts.Count + 1; // Simple ID assignment
            motorParts.Add(new MotorPart
                {
                    Id = motorPart.Id,
                    Name = motorPart.Name,
                    Color = motorPart.Color,
                    Price = motorPart.Price,
                    Quantity = motorPart.Quantity
                });
        }
        else // Update existing part
        {
            var existingPart = motorParts.FirstOrDefault(p => p.Id == motorPart.Id);
            if (existingPart != null)
            {
                existingPart.Name = motorPart.Name;
                existingPart.Color = motorPart.Color;
                existingPart.Price = motorPart.Price;
                existingPart.Quantity = motorPart.Quantity;
            }
        }
        ClearFields();
    }

    private void EditMotorPart(MotorPart partToEdit)
    {
        motorPart = new MotorPart
            {
                Id = partToEdit.Id,
                Name = partToEdit.Name,
                Color = partToEdit.Color,
                Price = partToEdit.Price,
                Quantity = partToEdit.Quantity
            };
    }

    private void DeleteMotorPart(MotorPart partToDelete)
    {
        motorParts.Remove(partToDelete);
    }

    private void ClearFields()
    {
        motorPart = new MotorPart();
    }

    public class MotorPart
    {
        public int Id { get; set; } 
        [Required(ErrorMessage = "Name is required.")]
        public string Name { get; set; }
        [Required(ErrorMessage = "Color is required.")]
        public string Color { get; set; }
        [Range(0.01, double.MaxValue, ErrorMessage = "Price must be greater than zero.")]
        public decimal Price { get; set; }
        [Range(1, int.MaxValue, ErrorMessage = "Quantity must be at least 1.")]
        public int Quantity { get; set; }
    }
}

<style>
    body {
        background-image: url('https://w7.pngwing.com/pngs/961/476/png-transparent-creative-car-parts-background-05.png');
        background-size: cover;
        background-position: center;
        background-repeat: no-repeat;
    }

    .container {
        max-width: 600px;
        margin: auto;
        padding: 20px;
        background-color: rgba(249, 249, 249, 0.9);
        border-radius: 8px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
    }

    h3, h4 {
        text-align: center;
    }

    .form-group {
        margin-bottom: 15px;
    }

    .list-group {
        margin-top: 20px;
    }

    .list-group-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }
</style>
